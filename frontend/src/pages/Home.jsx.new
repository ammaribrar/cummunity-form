import { useState, useEffect } from 'react';
import { Link as RouterLink, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { motion } from 'framer-motion';
import RocketIcon from '@mui/icons-material/Rocket';
import TrendingUpIcon from '@mui/icons-material/TrendingUp';
import NewReleasesIcon from '@mui/icons-material/NewReleases';
import WhatshotIcon from '@mui/icons-material/Whatshot';
import ThumbUpIcon from '@mui/icons-material/ThumbUp';
import ChatBubbleOutlineIcon from '@mui/icons-material/ChatBubbleOutline';
import {
  Container,
  Box,
  Typography,
  Card,
  CardContent,
  CardActions,
  Button,
  Chip,
  Divider,
  Avatar,
  Skeleton,
  Tabs,
  Tab,
  useMediaQuery,
  useTheme,
  Grid,
  IconButton,
  Paper,
  Fade,
  Grow,
  useScrollTrigger,
  Fab,
  Zoom,
} from '@mui/material';

// Floating blob background component
const BlobBackground = () => (
  <Box
    sx={{
      position: 'fixed',
      top: 0,
      left: 0,
      width: '100%',
      height: '100%',
      zIndex: -1,
      overflow: 'hidden',
    }}
  >
    <Box
      component={motion.div}
      initial={{ scale: 0.8, opacity: 0.5 }}
      animate={{
        scale: [0.8, 1, 0.8],
        opacity: [0.5, 0.8, 0.5],
      }}
      transition={{
        duration: 20,
        repeat: Infinity,
        ease: 'linear',
      }}
      sx={{
        position: 'absolute',
        width: '60vw',
        height: '60vw',
        borderRadius: '30% 70% 70% 30% / 30% 30% 70% 70%',
        background: 'linear-gradient(45deg, #1976d2, #00bcd4)',
        filter: 'blur(100px)',
        opacity: 0.1,
      }}
    />
  </Box>
);

// Scroll to top button component
const ScrollTop = (props) => {
  const { children } = props;
  const trigger = useScrollTrigger({
    disableHysteresis: true,
    threshold: 100,
  });

  const handleClick = (event) => {
    const anchor = (event.target.ownerDocument || document).querySelector('#back-to-top-anchor');
    if (anchor) {
      anchor.scrollIntoView({
        block: 'center',
      });
    }
  };

  return (
    <Zoom in={trigger}>
      <Box
        onClick={handleClick}
        role="presentation"
        sx={{ position: 'fixed', bottom: 16, right: 16 }}
      >
        {children}
      </Box>
    </Zoom>
  );
};

const TabPanel = (props) => {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`simple-tabpanel-${index}`}
      aria-labelledby={`simple-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ pt: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
};

// Feature Card Component
const FeatureCard = ({ icon, title, description, color }) => (
  <motion.div
    whileHover={{ y: -8 }}
    transition={{ type: 'spring', stiffness: 300 }}
  >
    <Card 
      sx={{ 
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
        borderLeft: `4px solid ${color}`,
        '&:hover': {
          boxShadow: 3,
        },
      }}
    >
      <CardContent sx={{ flexGrow: 1 }}>
        <Box sx={{ mb: 2 }}>{icon}</Box>
        <Typography gutterBottom variant="h6" component="h3">
          {title}
        </Typography>
        <Typography variant="body2" color="text.secondary">
          {description}
        </Typography>
      </CardContent>
    </Card>
  </motion.div>
);

const Home = () => {
  const [posts, setPosts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [tabValue, setTabValue] = useState(0);
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const navigate = useNavigate();

  const handleTabChange = (event, newValue) => {
    setTabValue(newValue);
  };

  const features = [
    {
      icon: <RocketIcon sx={{ fontSize: 32, color: theme.palette.primary.main }} />,
      title: 'Lightning Fast',
      description: 'Experience blazing fast performance with our optimized platform that loads in the blink of an eye.',
      color: theme.palette.primary.main,
    },
    {
      icon: <TrendingUpIcon sx={{ fontSize: 32, color: theme.palette.success.main }} />,
      title: 'Trending Content',
      description: 'Stay ahead with trending topics and discover what\'s popular in the community right now.',
      color: theme.palette.success.main,
    },
    {
      icon: <NewReleasesIcon sx={{ fontSize: 32, color: theme.palette.warning.main }} />,
      title: 'Latest Updates',
      description: 'Get instant access to the most recent and relevant content as soon as it\'s published.',
      color: theme.palette.warning.main,
    },
    {
      icon: <WhatshotIcon sx={{ fontSize: 32, color: theme.palette.error.main }} />,
      title: 'Hot Topics',
      description: 'Dive into the most engaging and discussed topics that are making waves in the community.',
      color: theme.palette.error.main,
    },
  ];

  useEffect(() => {
    const fetchPosts = async () => {
      try {
        setLoading(true);
        // For now, using mock data since we don't have a backend
        // In a real app, you would use: const response = await axios.get(`/api/posts?sort=${sortBy}`);
        // setPosts(response.data);
        
        // Mock data for demonstration
        const mockPosts = [
          {
            _id: '1',
            title: 'Welcome to AI Community Forum',
            content: 'This is a sample post to demonstrate the UI. In a real app, this would be loaded from your backend.',
            author: {
              username: 'admin',
              avatar: 'https://i.pravatar.cc/150?img=1'
            },
            votes: 10,
            commentCount: 3,
            createdAt: new Date().toISOString(),
            tags: ['welcome', 'introduction']
          },
          {
            _id: '2',
            title: 'Getting Started with React',
            content: 'Learn how to build amazing web applications with React and Material-UI.',
            author: {
              username: 'reactfan',
              avatar: 'https://i.pravatar.cc/150?img=2'
            },
            votes: 15,
            commentCount: 5,
            createdAt: new Date(Date.now() - 3600000).toISOString(),
            tags: ['react', 'tutorial']
          }
        ];
        setPosts(mockPosts);
      } catch (error) {
        console.error('Error fetching posts:', error);
        setError('Failed to load posts. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchPosts();
  }, [tabValue]);

  const handleVote = async (postId, voteType) => {
    try {
      // In a real app, you would make an API call here
      // await axios.post(`/api/posts/${postId}/vote`, { voteType });
      
      // Update the UI optimistically
      setPosts(posts.map(post => 
        post._id === postId 
          ? { 
              ...post, 
              votes: voteType === 'upvote' ? post.votes + 1 : post.votes - 1,
              userVote: voteType === 'upvote' ? 1 : -1 
            } 
          : post
      ));
    } catch (error) {
      console.error('Error voting:', error);
    }
  };

  const PostSkeleton = () => (
    <Card sx={{ mb: 3 }}>
      <CardContent>
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <Skeleton variant="circular" width={40} height={40} />
          <Box sx={{ ml: 1 }}>
            <Skeleton width={120} height={24} />
            <Skeleton width={80} height={20} />
          </Box>
        </Box>
        <Skeleton height={28} width="80%" />
        <Skeleton height={20} width="60%" />
        <Box sx={{ display: 'flex', mt: 2, gap: 1 }}>
          <Skeleton width={60} height={24} />
          <Skeleton width={60} height={24} />
        </Box>
      </CardContent>
      <CardActions>
        <Skeleton width={80} height={36} />
        <Skeleton width={80} height={36} sx={{ ml: 1 }} />
      </CardActions>
    </Card>
  );

  return (
    <Container maxWidth="lg">
      {/* Hero Section */}
      <Box sx={{ 
        textAlign: 'center', 
        py: 8, 
        background: theme.palette.background.default,
        borderRadius: 2,
        mb: 4
      }}>
        <Typography variant="h3" component="h1" gutterBottom>
          Welcome to AI Community Forum
        </Typography>
        <Typography variant="h6" color="text.secondary" paragraph>
          Connect, share, and learn with AI enthusiasts around the world
        </Typography>
        <Button 
          variant="contained" 
          size="large" 
          color="primary"
          onClick={() => navigate('/create-post')}
          sx={{ mt: 2 }}
        >
          Create Post
        </Button>
      </Box>

      {/* Features Grid */}
      <Grid container spacing={3} sx={{ mb: 4 }}>
        {features.map((feature, index) => (
          <Grid item xs={12} sm={6} md={3} key={index}>
            <FeatureCard 
              icon={feature.icon}
              title={feature.title}
              description={feature.description}
              color={feature.color}
            />
          </Grid>
        ))}
      </Grid>

      {/* Posts Section */}
      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>
        <Tabs 
          value={tabValue} 
          onChange={handleTabChange} 
          aria-label="post sort tabs"
          variant={isMobile ? 'fullWidth' : 'standard'}
        >
          <Tab label="Newest" id="tab-0" />
          <Tab label="Popular" id="tab-1" />
        </Tabs>
      </Box>

      {error ? (
        <Box sx={{ 
          textAlign: 'center', 
          p: 4, 
          backgroundColor: theme.palette.error.light,
          color: theme.palette.error.contrastText,
          borderRadius: 1,
          mb: 3
        }}>
          <Typography>{error}</Typography>
        </Box>
      ) : (
        <TabPanel value={tabValue} index={0}>
          {loading ? (
            Array.from(new Array(3)).map((_, index) => (
              <PostSkeleton key={`skeleton-${index}`} />
            ))
          ) : posts.length > 0 ? (
            posts.map((post) => (
              <Card key={post._id} sx={{ mb: 3 }}>
                <CardContent>
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                    <Avatar 
                      src={post.author.avatar} 
                      alt={post.author.username}
                      component={RouterLink}
                      to={`/profile/${post.author.username}`}
                      sx={{ textDecoration: 'none' }}
                    />
                    <Box sx={{ ml: 1 }}>
                      <Typography 
                        component={RouterLink} 
                        to={`/profile/${post.author.username}`}
                        sx={{ 
                          textDecoration: 'none',
                          color: 'text.primary',
                          fontWeight: 500,
                          '&:hover': {
                            textDecoration: 'underline',
                          },
                        }}
                      >
                        {post.author.username}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        {new Date(post.createdAt).toLocaleDateString()}
                      </Typography>
                    </Box>
                  </Box>
                  <Typography 
                    variant="h6" 
                    component={RouterLink}
                    to={`/post/${post._id}`}
                    sx={{
                      textDecoration: 'none',
                      color: 'text.primary',
                      display: 'block',
                      mb: 1,
                      '&:hover': {
                        color: 'primary.main',
                      },
                    }}
                  >
                    {post.title}
                  </Typography>
                  <Typography variant="body1" sx={{ mb: 2 }}>
                    {post.content.length > 200 
                      ? `${post.content.substring(0, 200)}...` 
                      : post.content}
                  </Typography>
                  <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
                    {post.tags.map((tag, index) => (
                      <Chip 
                        key={index} 
                        label={tag} 
                        size="small"
                        component={RouterLink}
                        to={`/tag/${tag}`}
                        clickable
                        sx={{ 
                          textDecoration: 'none',
                          '&:hover': {
                            backgroundColor: 'action.hover',
                          },
                        }}
                      />
                    ))}
                  </Box>
                  <Divider sx={{ my: 2 }} />
                </CardContent>
                <CardActions>
                  <Button 
                    size="small" 
                    startIcon={<ThumbUpIcon />}
                    onClick={() => handleVote(post._id, 'upvote')}
                  >
                    {post.votes} Upvotes
                  </Button>
                  <Button 
                    size="small" 
                    startIcon={<ChatBubbleOutlineIcon />}
                    component={RouterLink}
                    to={`/post/${post._id}#comments`}
                  >
                    {post.commentCount} Comments
                  </Button>
                </CardActions>
              </Card>
            ))
          ) : (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="h6" color="text.secondary">
                No posts found. Be the first to create one!
              </Typography>
            </Box>
          )}
        </TabPanel>
      )}

      <ScrollTop {...props}>
        <Fab color="primary" size="small" aria-label="scroll back to top">
          <Box component="span" sx={{ transform: 'rotate(-90deg)' }}>➜</Box>
        </Fab>
      </ScrollTop>
      
      <BlobBackground />
    </Container>
  );
};

export default Home;
